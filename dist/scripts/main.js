#!/usr/bin/env node
import { CoreRunner } from './core-runner.js';
import * as path from 'path';
import * as fs from 'fs/promises';
import * as yaml from 'js-yaml';
async function main() {
    console.log('üöÄ [TradingAssistantX] „É°„Ç§„É≥ÂÆüË°å„Ç∑„Çπ„ÉÜ„É†ÈñãÂßã');
    console.log('‚è∞ [ÂÆüË°å„É¢„Éº„Éâ] 1Êó•15Âõû„ÅÆÂÆöÊôÇÂÆüË°å„Ç∑„Çπ„ÉÜ„É†');
    console.log('üìÖ [„Ç∑„Çπ„ÉÜ„É†Ê¶ÇË¶Å] ÊúÄÈÅ©ÊäïÁ®øÊôÇÈñì„Åß„ÅÆËá™ÂãïÂÆüË°å');
    const startupTimestamp = new Date().toISOString();
    try {
        console.log('üîß [ÂàùÊúüÂåñ] „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç‰∏≠...');
        await validateSystemConfiguration();
        console.log('üìã [Ë®≠ÂÆö] ÂÆüË°åÁí∞Â¢É„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó‰∏≠...');
        const coreRunner = new CoreRunner({
            mode: 'loop',
            enableLogging: true,
            enableMetrics: true
        });
        console.log('üí° [Ëµ∑Âãï„É≠„Ç∞] „Ç∑„Çπ„ÉÜ„É†Ëµ∑ÂãïÊÉÖÂ†±„ÇíË®òÈå≤‰∏≠...');
        await logSystemStartup(startupTimestamp);
        console.log('üîÑ [„É´„Éº„ÉóÈñãÂßã] ÂÆöÊôÇÂÆüË°å„Ç∑„Çπ„ÉÜ„É†„ÇíÈñãÂßã„Åó„Åæ„Åô...');
        console.log('');
        console.log('üìä „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±:');
        console.log('  ‚Ä¢ ÂÆüË°åÂõûÊï∞: 15Âõû/Êó•');
        console.log('  ‚Ä¢ ÂÆüË°åÈñìÈöî: Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Å´Âü∫„Å•„ÅèÂÆöÊôÇÂÆüË°å');
        console.log('  ‚Ä¢ Áõ£Ë¶ñÊ©üËÉΩ: ÊúâÂäπ');
        console.log('  ‚Ä¢ „É°„Éà„É™„ÇØ„Çπ: ÊúâÂäπ');
        console.log('  ‚Ä¢ „É≠„Ç∞Ë®òÈå≤: ÊúâÂäπ');
        console.log('');
        await coreRunner.runLoop();
    }
    catch (error) {
        console.error('‚ùå [„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº] „É°„Ç§„É≥ÂÆüË°å„Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº:', error);
        await logSystemError(error, startupTimestamp);
        console.log('');
        console.log('üö® [„Ç®„É©„ÉºÂØæÂá¶Ê≥ï]');
        console.log('  1. „Éá„Éº„Çø„Éï„Ç°„Ç§„É´„ÅÆÊï¥ÂêàÊÄß„ÇíÁ¢∫Ë™ç');
        console.log('  2. „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç');
        console.log('  3. Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç');
        console.log('  4. pnpm dev „ÅßÂçò‰∏ÄÂÆüË°å„Çí„ÉÜ„Çπ„Éà');
        console.log('');
        process.exit(1);
    }
}
async function validateSystemConfiguration() {
    console.log('‚úÖ [Ë®≠ÂÆöÊ§úË®º] „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíÊ§úË®º‰∏≠...');
    const requiredDirectories = [
        'data',
        'data/config',
        'data/current',
        'data/metrics',
        'tasks/outputs'
    ];
    for (const dir of requiredDirectories) {
        const dirPath = path.join(process.cwd(), dir);
        try {
            await fs.mkdir(dirPath, { recursive: true });
            console.log(`  ‚úì ${dir} „Éá„Ç£„É¨„ÇØ„Éà„É™Á¢∫Ë™çÂÆå‰∫Ü`);
        }
        catch (error) {
            console.error(`  ‚ùå ${dir} „Éá„Ç£„É¨„ÇØ„Éà„É™„Ç®„É©„Éº:`, error);
            throw new Error(`Required directory ${dir} could not be created`);
        }
    }
    const configFiles = [
        { path: 'data/config/posting-times.yaml', required: false },
        { path: 'data/config/autonomous-config.yaml', required: false }
    ];
    for (const config of configFiles) {
        const configPath = path.join(process.cwd(), config.path);
        try {
            await fs.access(configPath);
            console.log(`  ‚úì ${config.path} Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Á¢∫Ë™çÂÆå‰∫Ü`);
        }
        catch (error) {
            if (config.required) {
                console.error(`  ‚ùå ${config.path} ÂøÖÈ†àË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
                throw new Error(`Required config file ${config.path} not found`);
            }
            else {
                console.log(`  ‚ö†Ô∏è  ${config.path} Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºà„Éá„Éï„Ç©„É´„ÉàÂÄ§„Çí‰ΩøÁî®Ôºâ`);
                await createDefaultConfig(config.path);
            }
        }
    }
    console.log('‚úÖ [Ë®≠ÂÆöÊ§úË®º] „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆöÊ§úË®ºÂÆå‰∫Ü');
}
async function createDefaultConfig(configPath) {
    const fullPath = path.join(process.cwd(), configPath);
    if (configPath.includes('posting-times.yaml')) {
        const defaultPostingTimes = {
            posting_times: {
                morning: ['07:00', '08:00', '09:00'],
                noon: ['12:00', '13:00'],
                evening: ['15:00', '16:00', '17:00', '18:00', '19:00'],
                night: ['21:00', '22:00', '23:00', '00:00', '01:00']
            }
        };
        await fs.mkdir(path.dirname(fullPath), { recursive: true });
        await fs.writeFile(fullPath, yaml.dump(defaultPostingTimes, { indent: 2 }));
        console.log(`  ‚úì ${configPath} „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü`);
    }
    else if (configPath.includes('autonomous-config.yaml')) {
        const defaultAutonomousConfig = {
            execution: {
                mode: 'SCHEDULED_POSTING',
                loop_interval: '15_times_daily',
                enable_metrics: true,
                enable_logging: true
            },
            quality: {
                min_content_length: 50,
                max_content_length: 280,
                educational_focus: true
            },
            safety: {
                max_errors_per_day: 5,
                cooldown_after_error: 300000
            }
        };
        await fs.mkdir(path.dirname(fullPath), { recursive: true });
        await fs.writeFile(fullPath, yaml.dump(defaultAutonomousConfig, { indent: 2 }));
        console.log(`  ‚úì ${configPath} „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü`);
    }
}
async function logSystemStartup(timestamp) {
    try {
        const startupInfo = {
            timestamp,
            mode: 'loop_execution',
            command: 'pnpm start',
            system: {
                node_version: process.version,
                platform: process.platform,
                architecture: process.arch,
                working_directory: process.cwd()
            },
            configuration: {
                execution_mode: '15_times_daily',
                monitoring_enabled: true,
                metrics_enabled: true,
                logging_enabled: true
            }
        };
        const outputDir = path.join(process.cwd(), 'tasks', 'outputs');
        await fs.mkdir(outputDir, { recursive: true });
        const filename = `main-startup-${Date.now()}.yaml`;
        const filePath = path.join(outputDir, filename);
        await fs.writeFile(filePath, yaml.dump(startupInfo, { indent: 2 }));
        console.log(`  ‚úì „Ç∑„Çπ„ÉÜ„É†Ëµ∑ÂãïÊÉÖÂ†±„ÇíË®òÈå≤: ${filename}`);
    }
    catch (error) {
        console.warn('‚ö†Ô∏è [Ëµ∑Âãï„É≠„Ç∞] Ëµ∑Âãï„É≠„Ç∞„ÅÆË®òÈå≤„Å´Â§±Êïó:', error);
    }
}
async function logSystemError(error, startupTimestamp) {
    try {
        const errorInfo = {
            startup_timestamp: startupTimestamp,
            error_timestamp: new Date().toISOString(),
            mode: 'loop_execution',
            command: 'pnpm start',
            error: {
                message: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined,
                type: error instanceof Error ? error.constructor.name : 'Unknown'
            },
            system: {
                node_version: process.version,
                platform: process.platform,
                working_directory: process.cwd()
            }
        };
        const outputDir = path.join(process.cwd(), 'tasks', 'outputs');
        await fs.mkdir(outputDir, { recursive: true });
        const filename = `main-error-${Date.now()}.yaml`;
        const filePath = path.join(outputDir, filename);
        await fs.writeFile(filePath, yaml.dump(errorInfo, { indent: 2 }));
        console.log(`üìù [„Ç®„É©„Éº„É≠„Ç∞] „Ç∑„Çπ„ÉÜ„É†„Ç®„É©„ÉºÊÉÖÂ†±„ÇíË®òÈå≤: ${filename}`);
    }
    catch (logError) {
        console.error('‚ùå [„É≠„Ç∞„Ç®„É©„Éº] „Ç®„É©„Éº„É≠„Ç∞„ÅÆË®òÈå≤„Å´Â§±Êïó:', logError);
    }
}
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå [Êú™Âá¶ÁêÜÊãíÂê¶] Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});
process.on('uncaughtException', (error) => {
    console.error('‚ùå [Êú™Âá¶ÁêÜ‰æãÂ§ñ] Uncaught Exception:', error);
    process.exit(1);
});
// „É°„Ç§„É≥ÂÆüË°åÂà§ÂÆö
if (process.argv[1] && process.argv[1].endsWith('main.ts') || process.argv[1].endsWith('main.js')) {
    main().catch((error) => {
        console.error('‚ùå [„É°„Ç§„É≥Èñ¢Êï∞„Ç®„É©„Éº]:', error);
        process.exit(1);
    });
}
