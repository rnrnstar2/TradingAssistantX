import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';
import * as yaml from 'js-yaml';
// „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Âà∂ÈôêÔºàË°åÊï∞Ôºâ
const FILE_SIZE_LIMITS = {
    'claude-summary.yaml': 50,
    'system-state.yaml': 30,
    'decision-context.yaml': 40,
    'current-decisions.yaml': 60,
    'current-analysis.yaml': 40,
    'account-analysis-data.yaml': 60,
    'daily-action-data.yaml': 100
};
export class FileSizeMonitorSystem {
    dataDir;
    archiveDir;
    constructor() {
        this.dataDir = join(process.cwd(), 'data');
        this.archiveDir = join(this.dataDir, 'archives');
    }
    async checkFileSizes() {
        console.log('üîç [„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Áõ£Ë¶ñ] Âà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã...');
        for (const [fileName, limit] of Object.entries(FILE_SIZE_LIMITS)) {
            await this.checkSingleFile(fileName, limit);
        }
        console.log('‚úÖ [„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Áõ£Ë¶ñ] „ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü');
    }
    async checkSingleFile(fileName, limit) {
        try {
            const filePath = this.getFullPath(fileName);
            if (!existsSync(filePath)) {
                return; // „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
            }
            const content = readFileSync(filePath, 'utf8');
            const lineCount = content.split('\n').length;
            if (lineCount > limit) {
                const reason = `„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Âà∂ÈôêË∂ÖÈÅé: ${lineCount}Ë°å > ${limit}Ë°å`;
                console.warn(`‚ö†Ô∏è [Âà∂ÈôêË∂ÖÈÅé] ${fileName}: ${reason}`);
                await this.triggerAutoArchive(filePath, reason);
            }
            else {
                console.log(`‚úÖ [Âà∂ÈôêÂÜÖ] ${fileName}: ${lineCount}/${limit}Ë°å`);
            }
        }
        catch (error) {
            console.error(`‚ùå [Áõ£Ë¶ñ„Ç®„É©„Éº] ${fileName}:`, error);
        }
    }
    async triggerAutoArchive(filePath, reason) {
        try {
            const fileName = filePath.split('/').pop() || 'unknown';
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            // „Ç¢„Éº„Ç´„Ç§„Éñ„Éï„Ç°„Ç§„É´Âêç„ÇíÁîüÊàê
            const archiveFileName = `${fileName.replace('.yaml', '')}-${timestamp}.yaml`;
            const archiveSubDir = this.getArchiveSubDir(fileName);
            // „Ç¢„Éº„Ç´„Ç§„Éñ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç„Éª‰ΩúÊàê
            this.ensureArchiveDirExists(archiveSubDir);
            const archivePath = join(archiveSubDir, archiveFileName);
            // ÂÖÉ„Éï„Ç°„Ç§„É´„Çí„Ç¢„Éº„Ç´„Ç§„Éñ„Å´ÁßªÂãï
            const originalContent = readFileSync(filePath, 'utf8');
            writeFileSync(archivePath, originalContent);
            // ËªΩÈáèÁâà„Çí‰ΩúÊàê
            await this.createLightweightVersion(filePath, fileName);
            console.log(`üóÑÔ∏è [Ëá™Âãï„Ç¢„Éº„Ç´„Ç§„Éñ] ${fileName} ‚Üí ${archiveFileName}`);
            console.log(`üìù [ÁêÜÁî±] ${reason}`);
        }
        catch (error) {
            console.error('‚ùå [Ëá™Âãï„Ç¢„Éº„Ç´„Ç§„Éñ„Ç®„É©„Éº]:', error);
            console.error(`üìç [„Ç®„É©„ÉºË©≥Á¥∞] „Éï„Ç°„Ç§„É´: ${filePath.split('/').pop() || 'unknown'}, „Éë„Çπ: ${filePath}`);
        }
    }
    async createLightweightVersion(filePath, fileName) {
        try {
            if (fileName === 'account-analysis-data.yaml') {
                // ÊúÄÊñ∞„ÅÆÂàÜÊûê„Éá„Éº„Çø„ÅÆ„ÅøÊÆã„Åô
                const defaultAnalysis = {
                    timestamp: new Date().toISOString(),
                    followers: { current: 0, change_24h: 0, growth_rate: '0.0%' },
                    engagement: { avg_likes: 0, avg_retweets: 0, engagement_rate: 100.0 },
                    performance: { posts_today: 0, target_progress: '0%' },
                    health: { status: 'healthy', quality_score: 70 }
                };
                writeFileSync(filePath, yaml.dump(defaultAnalysis, { indent: 2 }));
            }
            else if (fileName === 'current-decisions.yaml') {
                // Á©∫„ÅÆÊ±∫ÂÆö„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰ΩúÊàê
                const defaultDecision = {
                    timestamp: new Date().toISOString(),
                    actionDecisions: [],
                    context: { accountHealth: 70, marketOpportunities: 0, actionSuggestions: 0 },
                    strategy: 'lightweight_mode',
                    dailyTarget: 15,
                    actionBreakdown: { original_post: 0, quote_tweet: 0, retweet: 0, reply: 0, total: 0 }
                };
                writeFileSync(filePath, yaml.dump(defaultDecision, { indent: 2 }));
            }
            else if (fileName === 'daily-action-data.yaml') {
                // Âü∫Êú¨ÁöÑ„Å™„Ç¢„ÇØ„Ç∑„Éß„É≥„É≠„Ç∞„Çí‰ΩúÊàê
                const defaultActionData = [{
                        timestamp: new Date().toISOString(),
                        totalActions: 0,
                        successfulActions: 0,
                        errors: []
                    }];
                writeFileSync(filePath, yaml.dump(defaultActionData, { indent: 2 }));
            }
            console.log(`‚ú® [ËªΩÈáèÁâà‰ΩúÊàê] ${fileName} „ÇíÂà∂ÈôêÂÜÖ„Çµ„Ç§„Ç∫„ÅßÂÜç‰ΩúÊàê`);
        }
        catch (error) {
            console.error(`‚ùå [ËªΩÈáèÁâà‰ΩúÊàê„Ç®„É©„Éº] ${fileName}:`, error);
        }
    }
    getFullPath(fileName) {
        // „Éï„Ç°„Ç§„É´Âêç„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™„Éë„Çπ„ÇíËøî„Åô
        if (fileName.includes('current-')) {
            return join(this.dataDir, 'current', fileName);
        }
        else if (fileName.includes('system-state') || fileName.includes('decision-context')) {
            return join(this.dataDir, 'core', fileName);
        }
        return join(this.dataDir, fileName);
    }
    ensureArchiveDirExists(archiveSubDir) {
        if (!existsSync(archiveSubDir)) {
            mkdirSync(archiveSubDir, { recursive: true });
            console.log(`üìÅ [„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê] ${archiveSubDir}`);
        }
    }
    getArchiveSubDir(fileName) {
        // „Éï„Ç°„Ç§„É´Âêç„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™„Ç¢„Éº„Ç´„Ç§„Éñ„Çµ„Éñ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíËøî„Åô
        if (fileName.includes('analysis')) {
            return join(this.archiveDir, 'analysis');
        }
        else if (fileName.includes('decision')) {
            return join(this.archiveDir, 'decisions');
        }
        else if (fileName.includes('action')) {
            return join(this.archiveDir, 'actions');
        }
        return join(this.archiveDir, 'general');
    }
    // ÂÆöÊúüÂÆüË°åÁî®„É°„ÇΩ„ÉÉ„Éâ
    async startPeriodicMonitoring(intervalMinutes = 30) {
        console.log(`üïê [ÂÆöÊúüÁõ£Ë¶ñÈñãÂßã] ${intervalMinutes}ÂàÜÈñìÈöî„Åß„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Áõ£Ë¶ñ„ÇíÈñãÂßã`);
        // Âç≥Â∫ß„Å´1ÂõûÂÆüË°å
        await this.checkFileSizes();
        // ÂÆöÊúüÂÆüË°å„ÇíË®≠ÂÆö
        setInterval(async () => {
            await this.checkFileSizes();
        }, intervalMinutes * 60 * 1000);
    }
}
// „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ
export const fileSizeMonitor = new FileSizeMonitorSystem();
