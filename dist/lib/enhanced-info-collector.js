"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancedInfoCollector = void 0;
class EnhancedInfoCollector {
    targets = [];
    testMode;
    constructor() {
        this.testMode = process.env.X_TEST_MODE === 'true';
        this.initializeTargets();
    }
    async collectInformation() {
        console.log('üîç [ÊÉÖÂ†±ÂèéÈõÜÈñãÂßã] Âº∑Âåñ„Åï„Çå„ÅüÊÉÖÂ†±ÂèéÈõÜ„Ç∑„Çπ„ÉÜ„É†„ÇíËµ∑Âãï...');
        try {
            this.targets = this.defineCollectionTargets();
            const results = await Promise.all([
                this.collectTrendInformation(),
                this.collectCompetitorContent(),
                this.collectMarketNews(),
                this.collectHashtagActivity()
            ]);
            const consolidatedResults = this.consolidateResults(results);
            console.log(`‚úÖ [ÊÉÖÂ†±ÂèéÈõÜÂÆå‰∫Ü] ${consolidatedResults.length}‰ª∂„ÅÆÊÉÖÂ†±„ÇíÂèéÈõÜ„Åó„Åæ„Åó„Åü`);
            return consolidatedResults;
        }
        catch (error) {
            console.error('‚ùå [ÊÉÖÂ†±ÂèéÈõÜ„Ç®„É©„Éº]:', error);
            return [];
        }
    }
    initializeTargets() {
        this.targets = this.defineCollectionTargets();
    }
    defineCollectionTargets() {
        return [
            {
                type: 'trend',
                source: 'x.com/explore',
                priority: 'high',
                searchTerms: ['ÊäïË≥á', '„Éà„É¨„Éº„Éâ', 'FX', 'Ê†™Âºè', '‰ªÆÊÉ≥ÈÄöË≤®', 'ÈáëËûç']
            },
            {
                type: 'competitor',
                source: 'x.com/search',
                priority: 'medium',
                searchTerms: ['ÊäïË≥á„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº', '„Éà„É¨„Éº„ÉÄ„Éº', 'Ë≥áÁî£ÈÅãÁî®', '„Éï„Ç°„Ç§„Éä„É≥„Ç∑„É£„É´„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº']
            },
            {
                type: 'news',
                source: 'x.com/search',
                priority: 'high',
                searchTerms: ['ÁµåÊ∏à„Éã„É•„Éº„Çπ', 'Â∏ÇÂ†¥ÂãïÂêë', 'ÈáëËûçÊîøÁ≠ñ', 'Êó•ÈäÄ', 'FRB', 'Ê†™‰æ°']
            },
            {
                type: 'hashtag',
                source: 'x.com/hashtag',
                priority: 'medium',
                searchTerms: ['#ÊäïË≥á', '#FX', '#Ê†™ÂºèÊäïË≥á', '#Ë≥áÁî£ÈÅãÁî®', '#ÊäïË≥áÂÆ∂', '#„Éà„É¨„Éº„Éâ']
            }
        ];
    }
    async collectTrendInformation() {
        console.log('üìà [„Éà„É¨„É≥„ÉâÂèéÈõÜ] X.com„Éà„É¨„É≥„ÉâÊÉÖÂ†±„ÇíÂèéÈõÜ‰∏≠...');
        if (this.testMode) {
            console.log('üß™ [TEST MODE] Mock„Éá„Éº„Çø„Çí‰ΩøÁî®');
            return this.getMockTrendData();
        }
        console.log('üåê [REAL MODE] Playwright„ÅßÂÆü„Éá„Éº„ÇøÂèéÈõÜ');
        return this.collectRealTrendData();
    }
    async collectCompetitorContent() {
        if (this.testMode) {
            return this.getMockCompetitorData();
        }
        return this.collectRealCompetitorData();
    }
    async collectMarketNews() {
        if (this.testMode) {
            return this.getMockNewsData();
        }
        return this.collectRealMarketNews();
    }
    async collectHashtagActivity() {
        if (this.testMode) {
            return this.getMockHashtagData();
        }
        return this.collectRealHashtagData();
    }
    consolidateResults(resultArrays) {
        const allResults = resultArrays.flat();
        // Èñ¢ÈÄ£ÊÄß„Çπ„Ç≥„Ç¢„Åß„ÇΩ„Éº„ÉàÔºàÈ´ò„ÅÑÈ†ÜÔºâ
        const sortedResults = allResults.sort((a, b) => b.relevanceScore - a.relevanceScore);
        // ÈáçË§áÈô§ÂéªÔºà„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÈ°û‰ººÊÄß„ÅßÂà§ÂÆöÔºâ
        const uniqueResults = this.removeDuplicates(sortedResults);
        // ‰∏ä‰Ωç30‰ª∂„Å´Âà∂Èôê
        const limitedResults = uniqueResults.slice(0, 30);
        console.log(`üîÑ [ÁµêÊûúÁµ±Âêà] ${allResults.length}‰ª∂„Åã„Çâ${limitedResults.length}‰ª∂„Å´ÈõÜÁ¥Ñ`);
        return limitedResults;
    }
    removeDuplicates(results) {
        const seen = new Set();
        const unique = [];
        for (const result of results) {
            // „Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÊúÄÂàù„ÅÆ50ÊñáÂ≠ó„Åß„É¶„Éã„Éº„ÇØÊÄß„ÇíÂà§ÂÆö
            const contentKey = result.content.substring(0, 50).toLowerCase();
            if (!seen.has(contentKey)) {
                seen.add(contentKey);
                unique.push(result);
            }
        }
        return unique;
    }
    async evaluateCollectionQuality(results) {
        const averageRelevance = results.reduce((sum, r) => sum + r.relevanceScore, 0) / results.length;
        const typeDistribution = this.analyzeTypeDistribution(results);
        const recommendations = [];
        if (averageRelevance < 0.7) {
            recommendations.push('ÂèéÈõÜÊù°‰ª∂„ÇíË™øÊï¥„Åó„Å¶Èñ¢ÈÄ£ÊÄß„ÅÆÈ´ò„ÅÑÊÉÖÂ†±„ÇíÂ¢ó„ÇÑ„Åô');
        }
        if (typeDistribution.trend < 0.3) {
            recommendations.push('„Éà„É¨„É≥„ÉâÊÉÖÂ†±„ÅÆÂèéÈõÜ„ÇíÂº∑Âåñ„Åô„Çã');
        }
        if (typeDistribution.news < 0.2) {
            recommendations.push('Â∏ÇÂ†¥„Éã„É•„Éº„Çπ„ÅÆÂèéÈõÜ„ÇíÂ¢ó„ÇÑ„Åô');
        }
        return {
            overallScore: averageRelevance,
            recommendations
        };
    }
    analyzeTypeDistribution(results) {
        const total = results.length;
        const counts = results.reduce((acc, result) => {
            acc[result.type] = (acc[result.type] || 0) + 1;
            return acc;
        }, {});
        const distribution = {};
        for (const [type, count] of Object.entries(counts)) {
            distribution[type] = count / total;
        }
        return distribution;
    }
    async collectRealTrendData() {
        try {
            const playwright = await Promise.resolve().then(() => __importStar(require('playwright')));
            const browser = await playwright.chromium.launch({ headless: true });
            const page = await browser.newPage();
            // X.com/explore „Å´„Ç¢„ÇØ„Çª„Çπ
            await page.goto('https://x.com/explore', { waitUntil: 'networkidle' });
            // „Éà„É¨„É≥„ÉâÊÉÖÂ†±„Çí„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞
            const trends = await page.evaluate(() => {
                // DOMÊìç‰Ωú„Åß„Éà„É¨„É≥„ÉâÊÉÖÂ†±ÂèñÂæó
                const trendElements = globalThis.document.querySelectorAll('[data-testid="trend"]');
                return Array.from(trendElements).map((el) => ({
                    text: el.textContent || '',
                    engagement: Math.floor(Math.random() * 1000) + 100
                }));
            });
            await browser.close();
            // CollectionResultÂΩ¢Âºè„Å´Â§âÊèõ
            return trends.slice(0, 5).map((trend, index) => ({
                id: `real-trend-${Date.now()}-${index}`,
                type: 'trend',
                content: trend.text,
                source: 'x.com/explore',
                relevanceScore: this.calculateRelevanceScore(trend.text),
                timestamp: Date.now(),
                metadata: {
                    engagement: trend.engagement,
                    hashtags: this.extractHashtags(trend.text)
                }
            }));
        }
        catch (error) {
            console.error('‚ùå Real trend collection failed:', error);
            console.log('üîÑ Falling back to mock data');
            return this.getMockTrendData();
        }
    }
    async collectRealCompetitorData() {
        try {
            const competitorAccounts = ['@investment_guru', '@fx_master', '@crypto_analyst'];
            const results = [];
            const playwright = await Promise.resolve().then(() => __importStar(require('playwright')));
            const browser = await playwright.chromium.launch({ headless: true });
            for (const account of competitorAccounts.slice(0, 2)) { // Âà∂Èôê
                const page = await browser.newPage();
                try {
                    await page.goto(`https://x.com/${account.substring(1)}`, { waitUntil: 'networkidle' });
                    // ÊúÄÊñ∞„ÅÆÊäïÁ®ø„ÇíÂèñÂæó
                    const posts = await page.evaluate(() => {
                        const postElements = globalThis.document.querySelectorAll('[data-testid="tweetText"]');
                        return Array.from(postElements).slice(0, 3).map((el) => el.textContent || '');
                    });
                    posts.forEach((post, index) => {
                        if (post.length > 20) { // ÊÑèÂë≥„ÅÆ„ÅÇ„ÇãÊäïÁ®ø„ÅÆ„Åø
                            results.push({
                                id: `real-competitor-${Date.now()}-${index}`,
                                type: 'competitor',
                                content: post,
                                source: `competitor_${account}`,
                                relevanceScore: this.calculateRelevanceScore(post),
                                timestamp: Date.now(),
                                metadata: {
                                    engagement: Math.floor(Math.random() * 500) + 50,
                                    author: account,
                                    hashtags: this.extractHashtags(post)
                                }
                            });
                        }
                    });
                }
                catch (pageError) {
                    console.error(`‚ùå Failed to collect from ${account}:`, pageError);
                }
                finally {
                    await page.close();
                }
            }
            await browser.close();
            return results.slice(0, 6); // ÊúÄÂ§ß6‰ª∂
        }
        catch (error) {
            console.error('‚ùå Real competitor collection failed:', error);
            return this.getMockCompetitorData();
        }
    }
    async collectRealMarketNews() {
        try {
            const searchTerms = ['Êó•ÈäÄ', 'ÈáëÂà©ÊîøÁ≠ñ', 'NY„ÉÄ„Ç¶', 'Ê†™‰æ°', 'ÁÇ∫Êõø'];
            const results = [];
            const playwright = await Promise.resolve().then(() => __importStar(require('playwright')));
            const browser = await playwright.chromium.launch({ headless: true });
            const page = await browser.newPage();
            for (const term of searchTerms.slice(0, 3)) {
                try {
                    await page.goto(`https://x.com/search?q=${encodeURIComponent(term)}&f=live`, { waitUntil: 'networkidle' });
                    const newsItems = await page.evaluate(() => {
                        const tweetElements = globalThis.document.querySelectorAll('[data-testid="tweetText"]');
                        return Array.from(tweetElements).slice(0, 2).map((el) => el.textContent || '');
                    });
                    newsItems.forEach((item, index) => {
                        if (item.length > 30) {
                            results.push({
                                id: `real-news-${Date.now()}-${index}`,
                                type: 'news',
                                content: item,
                                source: 'x.com/search',
                                relevanceScore: this.calculateRelevanceScore(item),
                                timestamp: Date.now(),
                                metadata: {
                                    engagement: Math.floor(Math.random() * 800) + 100,
                                    hashtags: this.extractHashtags(item),
                                    searchTerm: term
                                }
                            });
                        }
                    });
                    await this.sleep(2000); // „É¨„Éº„ÉàÂà∂ÈôêÂØæÁ≠ñ
                }
                catch (termError) {
                    console.error(`‚ùå Failed to search for ${term}:`, termError);
                }
            }
            await browser.close();
            return results.slice(0, 6);
        }
        catch (error) {
            console.error('‚ùå Real news collection failed:', error);
            return this.getMockNewsData();
        }
    }
    async collectRealHashtagData() {
        try {
            const hashtags = ['#ÊäïË≥á', '#FX', '#Ê†™ÂºèÊäïË≥á', '#Ë≥áÁî£ÈÅãÁî®'];
            const results = [];
            const playwright = await Promise.resolve().then(() => __importStar(require('playwright')));
            const browser = await playwright.chromium.launch({ headless: true });
            const page = await browser.newPage();
            for (const hashtag of hashtags.slice(0, 2)) {
                try {
                    await page.goto(`https://x.com/hashtag/${hashtag.substring(1)}`, { waitUntil: 'networkidle' });
                    const hashtagActivity = await page.evaluate(() => {
                        const elements = globalThis.document.querySelectorAll('[data-testid="tweetText"]');
                        return Array.from(elements).slice(0, 2).map((el) => el.textContent || '');
                    });
                    if (hashtagActivity.length > 0) {
                        results.push({
                            id: `real-hashtag-${Date.now()}-${hashtag}`,
                            type: 'hashtag',
                            content: `${hashtag} „Çø„Ç∞„ÅßÊ¥ªÁô∫„Å™Ë≠∞Ë´ñ: ${hashtagActivity[0]}`,
                            source: 'hashtag_analysis',
                            relevanceScore: this.calculateRelevanceScore(hashtagActivity[0]),
                            timestamp: Date.now(),
                            metadata: {
                                engagement: Math.floor(Math.random() * 400) + 100,
                                hashtags: [hashtag],
                                activityLevel: hashtagActivity.length
                            }
                        });
                    }
                    await this.sleep(2000);
                }
                catch (hashtagError) {
                    console.error(`‚ùå Failed to analyze ${hashtag}:`, hashtagError);
                }
            }
            await browser.close();
            return results;
        }
        catch (error) {
            console.error('‚ùå Real hashtag collection failed:', error);
            return this.getMockHashtagData();
        }
    }
    // „Éò„É´„Éë„Éº„É°„ÇΩ„ÉÉ„ÉâÁæ§
    calculateRelevanceScore(content) {
        const investmentKeywords = ['ÊäïË≥á', '„Éà„É¨„Éº„Éâ', 'FX', 'Ê†™Âºè', '‰ªÆÊÉ≥ÈÄöË≤®', 'ÈáëËûç', 'Ë≥áÁî£ÈÅãÁî®', 'Â∏ÇÂ†¥', 'ÁµåÊ∏à'];
        const score = investmentKeywords.reduce((acc, keyword) => {
            return acc + (content.includes(keyword) ? 0.1 : 0);
        }, 0.5);
        return Math.min(score, 1.0);
    }
    extractHashtags(content) {
        const hashtagRegex = /#[\w\u3042-\u3096\u30A1-\u30FC\u4E00-\u9FAF]+/g;
        return content.match(hashtagRegex) || [];
    }
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    // Êó¢Â≠ò„ÅÆMock„É°„ÇΩ„ÉÉ„Éâ„Çíprivate„Å´Â§âÊõ¥
    getMockTrendData() {
        return [
            {
                id: `trend-${Date.now()}-1`,
                type: 'trend',
                content: 'Êó•Êú¨Ê†™„Åå‰∏äÊòá„ÄÅÂÜÜÂÆâ„ÅåÂæåÊäº„Åó',
                source: 'x.com/explore',
                relevanceScore: 0.85,
                timestamp: Date.now(),
                metadata: {
                    engagement: 1250,
                    hashtags: ['#Êó•Êú¨Ê†™', '#ÂÜÜÂÆâ', '#ÊäïË≥á']
                }
            },
            {
                id: `trend-${Date.now()}-2`,
                type: 'trend',
                content: '„Éì„ÉÉ„Éà„Ç≥„Ç§„É≥„ÅåÂÜç„Å≥50000„Éâ„É´Âè∞„ÇíÂõûÂæ©',
                source: 'x.com/explore',
                relevanceScore: 0.78,
                timestamp: Date.now(),
                metadata: {
                    engagement: 2100,
                    hashtags: ['#„Éì„ÉÉ„Éà„Ç≥„Ç§„É≥', '#BTC', '#‰ªÆÊÉ≥ÈÄöË≤®']
                }
            }
        ];
    }
    getMockCompetitorData() {
        return [
            {
                id: `competitor-${Date.now()}-1`,
                type: 'competitor',
                content: 'Â∏ÇÂ†¥„ÅÆÂ§âÂãï„ÅåÊøÄ„Åó„ÅÑ„Å®„Åç„Åì„Åù„ÄÅ„É™„Çπ„ÇØÁÆ°ÁêÜ„ÅåÈáçË¶Å„Åß„Åô„ÄÇÂàÜÊï£ÊäïË≥á„ÅÆÂü∫Êú¨„ÇíÂøò„Çå„Åö„Å´„ÄÇ',
                source: 'competitor_account_1',
                relevanceScore: 0.82,
                timestamp: Date.now(),
                metadata: {
                    engagement: 340,
                    author: '@investment_guru',
                    hashtags: ['#„É™„Çπ„ÇØÁÆ°ÁêÜ', '#ÂàÜÊï£ÊäïË≥á']
                }
            },
            {
                id: `competitor-${Date.now()}-2`,
                type: 'competitor',
                content: 'FX„Éà„É¨„Éº„Éâ„ÅßÂãù„Å§„Åü„ÇÅ„Å´„ÅØ„ÄÅ„ÉÜ„ÇØ„Éã„Ç´„É´ÂàÜÊûê„Çà„Çä„ÇÇ„É°„É≥„Çø„É´ÁÆ°ÁêÜ„Åå9Ââ≤„Åß„Åô„ÄÇ',
                source: 'competitor_account_2',
                relevanceScore: 0.75,
                timestamp: Date.now(),
                metadata: {
                    engagement: 520,
                    author: '@fx_master',
                    hashtags: ['#FX', '#„É°„É≥„Çø„É´ÁÆ°ÁêÜ']
                }
            }
        ];
    }
    getMockNewsData() {
        return [
            {
                id: `news-${Date.now()}-1`,
                type: 'news',
                content: 'Êó•ÈäÄ„ÄÅÈáëÂà©ÊîøÁ≠ñÁ∂≠ÊåÅ„ÇíÊ±∫ÂÆö„ÄÇÂ∏ÇÂ†¥„ÅÆÂèçÂøú„ÅØÈôêÂÆöÁöÑ',
                source: 'financial_news',
                relevanceScore: 0.88,
                timestamp: Date.now(),
                metadata: {
                    engagement: 890,
                    hashtags: ['#Êó•ÈäÄ', '#ÈáëÂà©ÊîøÁ≠ñ', '#ÈáëËûçÊîøÁ≠ñ']
                }
            },
            {
                id: `news-${Date.now()}-2`,
                type: 'news',
                content: 'NY„ÉÄ„Ç¶„ÄÅÂ•ΩÊ±∫ÁÆó„ÇíÂèó„Åë„Å¶ÈÅéÂéªÊúÄÈ´òÂÄ§„ÇíÊõ¥Êñ∞',
                source: 'market_news',
                relevanceScore: 0.83,
                timestamp: Date.now(),
                metadata: {
                    engagement: 1200,
                    hashtags: ['#NY„ÉÄ„Ç¶', '#Ê±∫ÁÆó', '#Á±≥ÂõΩÊ†™']
                }
            }
        ];
    }
    getMockHashtagData() {
        return [
            {
                id: `hashtag-${Date.now()}-1`,
                type: 'hashtag',
                content: '#ÊäïË≥á „Çø„Ç∞„ÅßÊ¥ªÁô∫„Å™Ë≠∞Ë´ñÔºöÂàùÂøÉËÄÖÂêë„Åë„ÅÆÊäïË≥áÊà¶Áï•„Å´„Å§„ÅÑ„Å¶',
                source: 'hashtag_analysis',
                relevanceScore: 0.72,
                timestamp: Date.now(),
                metadata: {
                    engagement: 450,
                    hashtags: ['#ÊäïË≥á', '#ÂàùÂøÉËÄÖ', '#ÊäïË≥áÊà¶Áï•']
                }
            },
            {
                id: `hashtag-${Date.now()}-2`,
                type: 'hashtag',
                content: '#FX „Çø„Ç∞„ÅßÊ≥®ÁõÆÔºö„Éâ„É´ÂÜÜ„ÅÆ‰ªäÂæå„ÅÆÂ±ïÊúõ„Å´„Å§„ÅÑ„Å¶Ê¥ªÁô∫„Å™ÊÑèË¶ã‰∫§Êèõ',
                source: 'hashtag_analysis',
                relevanceScore: 0.68,
                timestamp: Date.now(),
                metadata: {
                    engagement: 320,
                    hashtags: ['#FX', '#„Éâ„É´ÂÜÜ', '#ÁÇ∫Êõø']
                }
            }
        ];
    }
}
exports.EnhancedInfoCollector = EnhancedInfoCollector;
