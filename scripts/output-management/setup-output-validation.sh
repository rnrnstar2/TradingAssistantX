#!/bin/bash

# setup-output-validation.sh
# Setup script for output management validation system
# MVP-compliant setup with minimal configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Project root directory
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"

# Function to print colored output
print_error() {
    echo -e "${RED}❌ SETUP ERROR: $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ SETUP: $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  SETUP WARNING: $1${NC}"
}

print_info() {
    echo -e "ℹ️  SETUP INFO: $1"
}

# Function to make scripts executable
make_scripts_executable() {
    print_info "Making output management scripts executable..."
    
    chmod +x "$ROOT_DIR/scripts/output-management/validate-output-compliance.sh"
    chmod +x "$ROOT_DIR/scripts/output-management/pre-commit-output-validation.sh"
    chmod +x "$ROOT_DIR/scripts/output-management/setup-output-validation.sh"
    
    print_success "Scripts made executable"
}

# Function to create approved output directories
create_approved_directories() {
    print_info "Creating approved output directories..."
    
    APPROVED_DIRS=(
        "$ROOT_DIR/tasks/outputs"
        "$ROOT_DIR/tasks/analysis-results"
        "$ROOT_DIR/tasks/temporary"
    )
    
    for dir in "${APPROVED_DIRS[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            print_success "Created directory: $dir"
        else
            print_info "Directory already exists: $dir"
        fi
    done
}

# Function to create .gitignore entries for temporary files
setup_gitignore() {
    print_info "Setting up .gitignore for temporary files..."
    
    GITIGNORE_FILE="$ROOT_DIR/.gitignore"
    
    # Add entries for temporary files if they don't exist
    TEMP_ENTRIES=(
        "# Output Management - Temporary files"
        "tasks/temporary/"
        "tasks/*/temporary/"
        "*.tmp"
        "*.temp"
        "*-temp.*"
        "debug-*.log"
        "test-output-*"
    )
    
    for entry in "${TEMP_ENTRIES[@]}"; do
        if ! grep -q "^$entry$" "$GITIGNORE_FILE" 2>/dev/null; then
            echo "$entry" >> "$GITIGNORE_FILE"
            print_success "Added to .gitignore: $entry"
        fi
    done
}

# Function to install pre-commit hook
install_pre_commit_hook() {
    print_info "Installing pre-commit hook..."
    
    HOOKS_DIR="$ROOT_DIR/.git/hooks"
    PRE_COMMIT_HOOK="$HOOKS_DIR/pre-commit"
    
    # Create hooks directory if it doesn't exist
    if [ ! -d "$HOOKS_DIR" ]; then
        mkdir -p "$HOOKS_DIR"
        print_success "Created hooks directory"
    fi
    
    # Create pre-commit hook that calls our validation script
    cat > "$PRE_COMMIT_HOOK" << 'EOF'
#!/bin/bash
# Pre-commit hook for output management validation
# Auto-generated by setup-output-validation.sh

# Run output management validation
if [ -f "\$ROOT_DIR/scripts/output-management/pre-commit-output-validation.sh" ]; then
    "\$ROOT_DIR/scripts/output-management/pre-commit-output-validation.sh"
else
    echo "⚠️  WARNING: Output management validation script not found"
    echo "⚠️  Run: \$ROOT_DIR/scripts/output-management/setup-output-validation.sh"
fi
EOF
    
    chmod +x "$PRE_COMMIT_HOOK"
    print_success "Pre-commit hook installed"
}

# Function to create npm scripts for convenience
setup_npm_scripts() {
    print_info "Setting up npm scripts for output management..."
    
    # Check if package.json has scripts section
    if [ -f "$ROOT_DIR/package.json" ]; then
        # Create a simple reference in package.json (manual addition recommended)
        print_info "Add these scripts to package.json manually:"
        echo ""
        echo "\"scripts\": {"
        echo "  \"validate-output\": \"bash scripts/output-management/validate-output-compliance.sh\","
        echo "  \"cleanup-output\": \"bash scripts/output-management/validate-output-compliance.sh --cleanup\","
        echo "  \"setup-output-validation\": \"bash scripts/output-management/setup-output-validation.sh\""
        echo "}"
        echo ""
    else
        print_warning "package.json not found - skipping npm scripts setup"
    fi
}

# Function to run initial validation
run_initial_validation() {
    print_info "Running initial output management validation..."
    
    if "$ROOT_DIR/scripts/output-management/validate-output-compliance.sh"; then
        print_success "Initial validation passed"
    else
        print_warning "Initial validation found issues"
        print_info "Run with --cleanup to fix: scripts/output-management/validate-output-compliance.sh --cleanup"
    fi
}

# Function to create README for output management
create_readme() {
    print_info "Creating output management README..."
    
    cat > "$ROOT_DIR/scripts/output-management/README.md" << 'EOF'
# Output Management System

MVP-compliant output management system to prevent root directory pollution.

## 🎯 Purpose

Prevents pollution of the root directory with analysis files, reports, and temporary outputs by enforcing structured output locations.

## 📂 Approved Output Locations

### Task-Related Outputs
```
tasks/{TIMESTAMP}/outputs/          # Task-specific outputs
tasks/{TIMESTAMP}/analysis/         # Task-specific analysis
tasks/{TIMESTAMP}/reports/          # Task-specific reports
tasks/{TIMESTAMP}/temporary/        # Task-specific temporary files
```

### General Outputs
```
tasks/outputs/                      # General outputs
tasks/analysis-results/             # Analysis results
tasks/temporary/                    # Temporary files
```

### App-Specific Outputs
```
apps/{app-name}/tasks/              # App-specific tasks
apps/{app-name}/analysis/           # App-specific analysis
apps/{app-name}/reports/            # App-specific reports
```

## 🔧 Scripts

### validate-output-compliance.sh
Validates compliance with output management rules.

```bash
# Check compliance
scripts/output-management/validate-output-compliance.sh

# Check and auto-fix violations
scripts/output-management/validate-output-compliance.sh --cleanup
```

### pre-commit-output-validation.sh
Pre-commit hook to prevent violations from being committed.

### setup-output-validation.sh
Setup script to install the validation system.

## 📋 Usage

### Initial Setup
```bash
scripts/output-management/setup-output-validation.sh
```

### Daily Validation
```bash
scripts/output-management/validate-output-compliance.sh
```

### Fix Violations
```bash
scripts/output-management/validate-output-compliance.sh --cleanup
```

## 🚫 Forbidden Patterns

Files matching these patterns are forbidden in the root directory:
- `*-analysis.md`
- `*-report.md`
- `*-output.*`
- `analysis-*.md`
- `report-*.md`
- `output-*.md`
- `*.tmp`
- `*.temp`
- `temp-*`
- `debug-*`

## ✅ Compliance

The system automatically:
1. Validates output locations before commits
2. Generates compliance reports
3. Suggests proper file locations
4. Provides cleanup tools

## 🎯 MVP Principles

This system follows MVP principles:
- **Simple**: Minimal configuration required
- **Effective**: Prevents pollution without complexity
- **Maintainable**: Easy to understand and modify
- **Integrated**: Works with existing git workflow

---

**Note**: This system is designed to be simple and effective, not comprehensive. It focuses on preventing the most common pollution patterns.
EOF
    
    print_success "README created"
}

# Main execution
main() {
    echo "🔧 Output Management Validation Setup"
    echo "====================================="
    
    # Make scripts executable
    make_scripts_executable
    
    # Create approved directories
    create_approved_directories
    
    # Setup gitignore
    setup_gitignore
    
    # Install pre-commit hook
    install_pre_commit_hook
    
    # Setup npm scripts (informational)
    setup_npm_scripts
    
    # Create README
    create_readme
    
    # Run initial validation
    run_initial_validation
    
    echo ""
    print_success "Output management validation system setup complete!"
    echo ""
    print_info "Next steps:"
    echo "1. Add suggested npm scripts to package.json"
    echo "2. Run: scripts/output-management/validate-output-compliance.sh --cleanup"
    echo "3. Test pre-commit hook by staging files"
    echo ""
    print_info "The system is now active and will prevent root directory pollution."
}

# Run main function
main "$@"